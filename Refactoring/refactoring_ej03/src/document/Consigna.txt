Tareas:
    1. Enumere los code smell y que refactorings utilizará para solucionarlos.

    2. Aplique los refactorings encontrados, mostrando el código refactorizado luego de
    aplicar cada uno.

1) Bad Smell: Breaking Encapsulation, Refactoring: Encapsulate Field
2) Bad Smell: Temp Variable, Refactoring: Replace Temp with Query
3) Bad Smell: Reinventa la Rueda, Refactoring: Replace Algorithm //ver error
Otra opción:
3) Bad Smell: Duplicated Code, Refactoring: Extract Method <--- ESTE

    3. Analice el código original y detecte si existe un problema al calcular las estadísticas.
    Explique cuál es el error y en qué casos se da ¿El error identificado sigue presente
    luego de realizar los refactorings? En caso de que no esté presente, ¿en qué
    momento se resolvió? De acuerdo a lo visto en la teoría, ¿podemos considerar esto
    un refactoring?

Problema en:

public long calculateAvg() {
    long avgLength = this.words
        .stream()
        .mapToLong(w -> w.length())
        .sum() / this.words.size();
    return avgLength;
}
-> this.words.size() puede ser = 0, lo cual lanzaría un error

----------------------------
Posible reemplazo:
public long calculateAvg() {
    return (long) this.words
        .stream()
        .mapToLong(w -> w.length())
        .average().orElse(0);
}
-> Cambia el comportamiento, por lo que no sería un refactoring
-> en el test se estaría esperando un error por parte de este método?
-> en este caso, podría refactorizar con:
public long calculateAvg() {
    return (long) this.words
        .stream()
        .mapToLong(w -> w.length())
        .average().orElseThrow(() -> new ArithmeticException());
}